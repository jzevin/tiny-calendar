{"version":3,"sources":["CalendarEnums.ts","CalendarDay.ts","CalendarMonth.ts","Calendar.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["export enum DayOfTheWeek {\n    Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\n  }\n  \nexport enum MonthOfTheYear {\n    January, February, March, April, May, June, July, August, September, October, November, December\n  }","import { DayOfTheWeek } from \"./CalendarEnums\";\nimport { Calendar } from \"./Calendar\";\n\nexport class CalendarDay {\n    _name: string;\n    _number: number;\n    constructor(dow: DayOfTheWeek, num: number) {\n      if(dow === undefined || num === undefined) throw new Error('Must provide a valid day of the week and number.');\n      if( !Calendar.isBetween(num, 1, 31) && !Calendar.isIntAndNum(num) ) throw new Error(`${num} Not a valid day number. Must be 1-31.`);\n      this._name = DayOfTheWeek[dow];\n      this._number = num;\n    }\n  }","import { MonthOfTheYear } from \"./CalendarEnums\";\nimport { CalendarDay } from \"./CalendarDay\";\nimport { Calendar } from \"./Calendar\";\n\nexport class CalendarMonth {\n  \n    private _name: string;\n    private _monthOfTheYear: MonthOfTheYear;\n    private _days: any[] = [];\n    private _year: number; \n    \n    constructor(year: number, month: MonthOfTheYear) {\n      if(month === undefined || year === undefined) throw new Error('Must provide a valid month name and year.');\n      this._monthOfTheYear = month;\n      this._year = year;\n      for(let i = 1; i <= 31; i++) {\n        const date = new Date(`${this.name} ${i} ${year}`);\n        if(Calendar.isDate(date) && date.getMonth() === this._monthOfTheYear) {\n          const day = new CalendarDay(date.getDay(), i);\n          this._days.push(day);\n        }\n      }\n    }\n  \n    get name(): string {\n      return MonthOfTheYear[this._monthOfTheYear];\n    }\n  \n    get days() {\n      return this._days;\n    }\n  \n    get year() {\n      return this._year;\n    }\n  \n    get monthOfTheYear(): MonthOfTheYear {\n      return this._monthOfTheYear;\n    }\n  }","import { CalendarMonth } from \"./CalendarMonth\";\nimport { MonthOfTheYear } from \"./CalendarEnums\";\n\nexport class Calendar {\n  \n    private _year: number; \n    days: string[];\n    _month: CalendarMonth;\n  \n    constructor(year?: number, month?: MonthOfTheYear) {\n      year = year || new Date().getFullYear();\n      month = month || new Date().getMonth();\n      this.year = year;\n      this.setMonth(month);\n    }\n  \n    get year (): number {\n      return this._year;\n    }\n  \n    set year (year) {\n      this._year = year;\n      // month must be changed on year change\n    }\n  \n    public setMonth(moty: MonthOfTheYear) {\n      this._month = new CalendarMonth(this.year, moty)\n    }\n  \n    public getNextMonth(): CalendarMonth {\n      let nextMonth = this._month.monthOfTheYear+1;\n      let year = this._year;\n      if(nextMonth > 11) {\n        nextMonth = MonthOfTheYear.January;\n        year++;\n      } \n      return new CalendarMonth(year, nextMonth)\n    }\n  \n    public getPreviousMonth(): CalendarMonth {\n      let nextMonth = this._month.monthOfTheYear-1;\n      let year = this._year;\n      if(nextMonth < 0) {\n        nextMonth = MonthOfTheYear.December;\n        year--;\n      } \n      return new CalendarMonth(year, nextMonth)\n    }\n  \n    public get monthName (): string {\n      return this._month.name;\n    }\n  \n    public static isDate (d: any): boolean {\n      return d instanceof Date && !isNaN(d.getDay());\n    }\n  \n    public static isIntAndNum(num: any): boolean{\n      return Number.isInteger(num) && !Number.isNaN(num);\n    }\n  \n    public static isBetween(num: number, min: number, max: number) : boolean{\n      return num >= min && num <= max;\n    }\n  \n  }","import { Calendar } from './Calendar'\n\nconst log = console.log.bind(console);\nconst cal = new Calendar();\n\n\nlog(cal.getNextMonth().name);\n"]}